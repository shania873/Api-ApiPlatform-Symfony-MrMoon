security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  enable_authenticator_manager: true
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email
  firewalls:
    api:
      pattern: ^/api
      stateless: true
      user_checker: App\Security\UserChecker
      entry_point: jwt
      json_login:
        check_path: /api/login
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure
      provider: app_user_provider
      jwt: ~
      refresh_jwt:
        check_path: /api/token/refresh
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/login, roles: PUBLIC_ACCESS }
    - { path: ^/api/diseases, roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/api/medias, roles: IS_AUTHENTICATED_FULLY }
    # - { path: ^/api/movies, roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/api/works, roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/api/token/refresh, roles: IS_AUTHENTICATED_ANONYMOUSLY }
gesdinet_jwt_refresh_token:
  ttl: 6300
  cookie:
    enabled: true
    same_site: none # default value
    path: / # default value
    domain: null # default value
    http_only: false # default value
    secure: true # default value
    remove_token_from_body: true # default value
when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
